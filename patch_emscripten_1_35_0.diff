--- ./emscripten/master/system/include/emscripten/bind.h	2015-10-19 10:11:20.000000000 -0700
+++ ./emscripten/master/system/include/emscripten/bind.h	2016-01-06 20:03:15.000000000 -0800
@@ -50,7 +50,7 @@
                 TYPEID floatType,
                 const char* name,
                 size_t size);
-            
+
             void _embind_register_std_string(
                 TYPEID stringType,
                 const char* name);
@@ -84,7 +84,7 @@
                 GenericFunction constructor,
                 const char* destructorSignature,
                 GenericFunction destructor);
-            
+
             void _embind_register_value_array_element(
                 TYPEID tupleType,
                 TYPEID getterReturnType,
@@ -105,7 +105,7 @@
                 GenericFunction constructor,
                 const char* destructorSignature,
                 GenericFunction destructor);
-            
+
             void _embind_register_value_object_field(
                 TYPEID structType,
                 const char* fieldName,
@@ -276,7 +276,7 @@
         return method;
     }
 
-    namespace internal {        
+    namespace internal {
         // this should be in <type_traits>, but alas, it's not
         template<typename T> struct remove_class;
         template<typename C, typename R, typename... A>
@@ -503,7 +503,7 @@
             typedef MemberType InstanceType::*MemberPointer;
             typedef internal::BindingType<MemberType> MemberBinding;
             typedef typename MemberBinding::WireType WireType;
-            
+
             template<typename ClassType>
             static WireType getWire(
                 const MemberPointer& field,
@@ -511,7 +511,7 @@
             ) {
                 return MemberBinding::toWireType(ptr.*field);
             }
-            
+
             template<typename ClassType>
             static void setWire(
                 const MemberPointer& field,
@@ -776,7 +776,7 @@
                 getContext(field));
             return *this;
         }
-    
+
         template<typename Getter, typename Setter>
         value_object& field(
             const char* fieldName,
@@ -975,7 +975,7 @@
         };
     }
 
-    template<typename BaseClass>
+    template<typename BaseClass, bool isPoly=false>
     struct base {
         typedef BaseClass class_type;
 
@@ -988,18 +988,18 @@
         static internal::TYPEID get() {
             return internal::TypeID<BaseClass>::get();
         }
-        
+
         template<typename ClassType>
         using Upcaster = BaseClass* (*)(ClassType*);
 
         template<typename ClassType>
         using Downcaster = ClassType* (*)(BaseClass*);
-        
+
         template<typename ClassType>
         static Upcaster<ClassType> getUpcaster() {
             return &convertPointer<ClassType, BaseClass>;
         }
-        
+
         template<typename ClassType>
         static Downcaster<ClassType> getDowncaster() {
             return &convertPointer<BaseClass, ClassType>;
@@ -1011,6 +1011,42 @@
         }
     };
 
+    template<typename BaseClass>
+    struct base<BaseClass, true> {
+        typedef BaseClass class_type;
+
+        template<typename ClassType>
+        static void verify() {
+            static_assert(!std::is_same<ClassType, BaseClass>::value, "Base must not have same type as class");
+            static_assert(std::is_base_of<BaseClass, ClassType>::value, "Derived class must derive from base");
+        }
+
+        static internal::TYPEID get() {
+            return internal::TypeID<BaseClass>::get();
+        }
+
+        template<typename ClassType>
+        using Upcaster = BaseClass* (*)(ClassType*);
+
+        template<typename ClassType>
+        using Downcaster = ClassType* (*)(BaseClass*);
+
+        template<typename ClassType>
+        static Upcaster<ClassType> getUpcaster() {
+            return &convertPointer<ClassType, BaseClass>;
+        }
+
+        template<typename ClassType>
+        static Downcaster<ClassType> getDowncaster() {
+            return &convertPointer<BaseClass, ClassType>;
+        }
+
+        template<typename From, typename To>
+        static To* convertPointer(From* ptr) {
+            return dynamic_cast<To*>(ptr);
+        }
+    };
+
     namespace internal {
         template<typename WrapperType>
         val wrapped_extend(const std::string& name, const val& properties) {
@@ -1092,7 +1128,7 @@
 
             typedef smart_ptr_trait<PointerType> PointerTrait;
             typedef typename PointerTrait::element_type PointeeType;
-            
+
             static_assert(std::is_same<ClassType, typename std::remove_cv<PointeeType>::type>::value, "smart pointer must point to this class");
 
             auto get = &PointerTrait::get;
@@ -1267,7 +1303,7 @@
         template<typename FieldType, typename = typename std::enable_if<!std::is_function<FieldType>::value>::type>
         EMSCRIPTEN_ALWAYS_INLINE const class_& property(const char* fieldName, const FieldType ClassType::*field) const {
             using namespace internal;
-            
+
             auto getter = &MemberAccess<ClassType, FieldType>::template getWire<ClassType>;
             _embind_register_class_property(
                 TypeID<ClassType>::get(),
